// Mocks generated by Mockito 5.0.15 from annotations
// in oromo_dictionary/test/features/english_oromo_dictionary/data/repositories/english_oromo_dictionary_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:oromo_dictionary/features/english_oromo_dictionary/domain/entities/english_word.dart'
    as _i5;
import 'package:oromo_dictionary/features/english_oromo_dictionary/domain/entities/oromo_translation.dart'
    as _i4;

import 'english_oromo_dictionary_repository_impl_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [MockRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockRemoteDataSource extends _i1.Mock
    implements _i2.MockRemoteDataSource {
  MockMockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i3.Future<List<_i4.OromoTranslation>> getOromoWordList(String? oromoTerm) =>
      (super.noSuchMethod(Invocation.method(#getOromoWordList, [oromoTerm]),
              returnValue: Future<List<_i4.OromoTranslation>>.value(
                  <_i4.OromoTranslation>[]))
          as _i3.Future<List<_i4.OromoTranslation>>);
  @override
  _i3.Future<List<_i5.EnglishWord>> getEnglishWordList(String? englishTerm) =>
      (super.noSuchMethod(Invocation.method(#getEnglishWordList, [englishTerm]),
              returnValue:
                  Future<List<_i5.EnglishWord>>.value(<_i5.EnglishWord>[]))
          as _i3.Future<List<_i5.EnglishWord>>);
}

/// A class which mocks [MockNetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockNetworkInfo extends _i1.Mock implements _i2.MockNetworkInfo {
  MockMockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  String toString() => super.toString();
}
