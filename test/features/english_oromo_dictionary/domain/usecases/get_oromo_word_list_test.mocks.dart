// Mocks generated by Mockito 5.0.15 from annotations
// in oromo_dictionary/test/features/english_oromo_dictionary/domain/usecases/get_oromo_word_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oromo_dictionary/core/error/failures.dart' as _i5;
import 'package:oromo_dictionary/features/english_oromo_dictionary/domain/entities/english_word.dart'
    as _i7;
import 'package:oromo_dictionary/features/english_oromo_dictionary/domain/entities/oromo_translation.dart'
    as _i6;

import 'get_oromo_word_list_test.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MockEnglishOromoDictionaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockEnglishOromoDictionaryRepository extends _i1.Mock
    implements _i3.MockEnglishOromoDictionaryRepository {
  MockMockEnglishOromoDictionaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.OromoTranslation>>>
      getOromoWordList(String? oromoTerm) => (super.noSuchMethod(
          Invocation.method(#getOromoWordList, [oromoTerm]),
          returnValue: Future<
                  _i2.Either<_i5.Failure, List<_i6.OromoTranslation>>>.value(
              _FakeEither_0<_i5.Failure, List<_i6.OromoTranslation>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.OromoTranslation>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.EnglishWord>>> getEnglishWordList(
          String? englishTerm) =>
      (super.noSuchMethod(Invocation.method(#getEnglishWordList, [englishTerm]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i7.EnglishWord>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i7.EnglishWord>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.EnglishWord>>>);
}
